{"version":3,"sources":["redux/auth/authOperations.js","components/auth/validation/validator.js","components/auth/AuthForm.js","pages/AuthPage.js"],"names":["API_KEY","schema","yup","shape","email","required","password","min","max","AuthForm","state","this","props","location","pathname","initialValues","validationSchema","onSubmit","values","console","log","registerOperation","loginOperation","isSubmitting","className","type","name","placeholder","component","disabled","Component","connect","user","dispatch","a","registerRequest","axios","post","returnSecureToken","data","registerSuccess","dir","registerError","response","error","message","loginRequest","loginSuccess","loginError","withRouter","AuthPage"],"mappings":"mRAGMA,EAAU,0C,SCkBDC,EAZFC,MAAaC,MAAM,CAC9BC,MAAOF,MAEJE,QACAC,WACHC,SAAUJ,MAEPG,SAAS,qBACTE,IAAI,EAAG,oBACPC,IAAI,GAAI,uB,OCXPC,E,4MACJC,MAAQ,G,4CACR,WAAU,IAAD,OACP,OACE,mCACE,qCACoC,kBAAjCC,KAAKC,MAAMC,SAASC,SAA+B,yCAAmB,yCACvE,cAAC,IAAD,CACEC,cAAe,CAAEX,MAAO,GAAIE,SAAU,IACtCU,iBAAkBf,EAClBgB,SAAU,SAAAC,GACRC,QAAQC,IAAIF,GACqB,kBAAjC,EAAKN,MAAMC,SAASC,SAChB,EAAKF,MAAMS,kBAAkBH,GAC7B,EAAKN,MAAMU,eAAeJ,IAPlC,SAUG,gBACGK,EADH,EACGA,aADH,OAGC,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,UAAU,aAAaC,KAAK,QAAQC,KAAK,QAAQC,YAAY,qBACpE,cAAC,IAAD,CAAcD,KAAK,QAAQE,UAAU,QACrC,cAAC,IAAD,CAAOJ,UAAU,gBAAgBC,KAAK,WAAWC,KAAK,WAAWC,YAAY,wBAC7E,cAAC,IAAD,CAAcD,KAAK,WAAWE,UAAU,QACxC,wBAAQJ,UAAU,UAAUC,KAAK,SAASI,SAAUN,EAApD,SACoC,kBAAjC,EAAKX,MAAMC,SAASC,SAA+B,UAAY,2B,GA1B3DgB,aAqCRC,cACb,KAAK,CAAEV,kBFxCwB,SAAAW,GAAI,8CAAI,WAAMC,GAAN,iBAAAC,EAAA,6DACvCD,EAASE,eAD8B,kBAGdC,IAAMC,KAAN,wEAA4ErC,GAA5E,2BAA2FgC,GAA3F,IAAgGM,mBAAmB,KAHrG,gBAG7BC,EAH6B,EAG7BA,KACRN,EAASO,YAAgBD,IAJY,gDAMrCpB,QAAQsB,IAAR,MACAR,EAASS,YAAc,KAAMC,SAASJ,KAAKK,MAAMC,UAPZ,yDAAJ,uDEwCTvB,eF9BE,SAAAU,GAAI,8CAAI,WAAMC,GAAN,iBAAAC,EAAA,6DACpCD,EAASa,eAD2B,kBAIXV,IAAMC,KAAN,oFAAwFrC,GAAxF,2BAAuGgC,GAAvG,IAA4GM,mBAAmB,KAJpH,gBAI1BC,EAJ0B,EAI1BA,KACRN,EAASc,YAAaR,IALY,gDAOlCN,EAASe,YAAW,KAAML,SAASJ,KAAKK,MAAMC,UAPZ,yDAAJ,wDE6BnBd,CAC+BkB,YAAWxC,IClC1CyC,UARE,WACf,OACE,mCACE,cAAC,EAAD","file":"static/js/2.bfefe28c.chunk.js","sourcesContent":["import axios from \"axios\";\nimport { loginError, loginRequest, loginSuccess, registerError, registerRequest, registerSuccess } from \"./authActions\";\n\nconst API_KEY = \"AIzaSyBW1egS-JDtJ2FUi1jzAuuQ_LHdtkNTw3U\";\n\nexport const registerOperation = user => async dispatch => {\n  dispatch(registerRequest());\n  try {\n    const { data } = await axios.post(`https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=${API_KEY}`, {...user,returnSecureToken: true});\n    dispatch(registerSuccess(data));\n  } catch (error) {\n    console.dir(error);\n    dispatch(registerError(error.response.data.error.message));\n  }\n};\nexport const loginOperation = user => async dispatch => {\n  dispatch(loginRequest());\n\n  try {\n    const { data } = await axios.post(`https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=${API_KEY}`, {...user,returnSecureToken: true});\n    dispatch(loginSuccess(data));\n  } catch (error) {\n    dispatch(loginError(error.response.data.error.message));\n  }\n};","import * as yup from \"yup\";\n\n// /(?=.*[0-9])(?=.*[!@#$%^&*])(?=.*[a-z])(?=.*[A-Z])[0-9a-zA-Z!@#$%^&*]{6,}/g;\n// (?=.*[0-9]) - строка содержит хотя бы одно число;\n// (?=.*[!@#$%^&*]) - строка содержит хотя бы один спецсимвол;\n// (?=.*[a-z]) - строка содержит хотя бы одну латинскую букву в нижнем регистре;\n// (?=.*[A-Z]) - строка содержит хотя бы одну латинскую букву в верхнем регистре;\n// [0-9a-zA-Z!@#$%^&*]{6,} - строка состоит не менее, чем из 6 вышеупомянутых символов.\n\nlet schema = yup.object().shape({\n  email: yup\n    .string()\n    .email()\n    .required(),\n  password: yup\n    .string()\n    .required(\"write valid email\")\n    .min(6, \"min 6 characters\")\n    .max(12, \"max 12 characters\")\n});\n\nexport default schema;","import { ErrorMessage, Field, Form, Formik } from \"formik\";\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { withRouter } from \"react-router\";\nimport { loginOperation, registerOperation } from \"../../redux/auth/authOperations\";\nimport schema from \"./validation/validator\";\n\nclass AuthForm extends Component {\n  state = {};\n  render() {\n    return (\n      <>\n        <>\n          {this.props.location.pathname === \"/registration\" ? <h1>SIGN UP</h1> : <h1>SIGN IN</h1>}\n          <Formik\n            initialValues={{ email: \"\", password: \"\" }}\n            validationSchema={schema}\n            onSubmit={values => {\n              console.log(values);\n              this.props.location.pathname === \"/registration\"\n                ? this.props.registerOperation(values)\n                : this.props.loginOperation(values);\n            }}\n          >\n            {(\n              { isSubmitting } \n            ) => (\n              <Form>\n                <Field className=\"emailInput\" type=\"email\" name=\"email\" placeholder=\"Write your email\" />\n                <ErrorMessage name=\"email\" component=\"div\" />\n                <Field className=\"passwordInput\" type=\"password\" name=\"password\" placeholder=\"Write your password\" />\n                <ErrorMessage name=\"password\" component=\"div\" />\n                <button className=\"btnSign\" type=\"submit\" disabled={isSubmitting}>\n                  {this.props.location.pathname === \"/registration\" ? \"SIGN UP\" : \"SIGN IN\"}\n                </button>\n              </Form>\n            )}\n          </Formik>\n        </>\n      </>\n    );\n  }\n}\n\nexport default connect(\n  null,{ registerOperation, loginOperation })(withRouter(AuthForm));","import React from \"react\";\nimport AuthForm from \"../components/auth/AuthForm\";\n\nconst AuthPage = () => {\n  return (\n    <>\n      <AuthForm />\n    </>\n  );\n};\n\nexport default AuthPage;\n"],"sourceRoot":""}